package {{.ServicePkgPath}}

import (
	"gitlab.com/mikrowezel/backend/db"
	"gitlab.com/mikrowezel/backend/granica/internal/model"
	m "gitlab.com/mikrowezel/backend/model"
)

func (req *Create{{.SingularPascalCase}}Req) toModel() model.{{.SingularPascalCase}} {
	return model.{{.SingularPascalCase}}{
		{{- range $key, $prop := .PropDefs}}
		{{- if not $prop.IsEmbedded}}
		{{- if eq $prop.SafeTypeMaker ""}}
		{{$prop.Name}}: req.{{$prop.SingularPascalCase}},
    {{- else}}
		{{$prop.Name}}: {{$prop.SafeTypeMaker}}(req.{{$prop.SingularPascalCase}}),
    {{- end}}
    {{- end}}
		{{- end}}
	}
}

func (res *Create{{.SingularPascalCase}}Res) fromModel(m *model.{{.SingularPascalCase}}, msg string, err error) {
	if m != nil {
		res.{{.SingularPascalCase}} = {{.SingularPascalCase}}{
		{{- range $key, $prop := .PropDefs}}
		{{- if not $prop.IsEmbedded}}
		{{- if eq $prop.ModelType ""}}
		{{$prop.Name}}: m.{{$prop.Name}},
		{{- else}}
		{{$prop.Name}}: m.{{$prop.Name}}.{{$prop.ModelType}},
		{{- end}}
		{{- end}}
		{{- end}}
		}
	}
	res.Msg = msg
	if err != nil {
		res.Error = err.Error()
	}
}

// get{{.PluralPascalCase}} -------------------------------------------------------------------
func (res *Get{{.PluralPascalCase}}Res) fromModel(ms []model.{{.SingularPascalCase}}, msg string, err error) {
	res{{.PluralPascalCase}} := []{{.SingularPascalCase}}{}
	for _, m := range ms {
		res := {{.SingularPascalCase}}{
		  {{- range $key, $prop := .PropDefs}}
		  {{- if not $prop.IsEmbedded}}
		  {{- if eq $prop.ModelType ""}}
		  {{$prop.Name}}: m.{{$prop.Name}},
		  {{- else}}
		  {{$prop.Name}}: m.{{$prop.Name}}.{{$prop.ModelType}},
		  {{- end}}
      {{- end}}
		  {{- end}}
		}
		res{{.PluralPascalCase}} = append(res{{.PluralPascalCase}}, res)
	}
	res.{{.PluralPascalCase}} = res{{.PluralPascalCase}}
	res.Msg = msg
	if err != nil {
		res.Error = err.Error()
	}
}

// get{{.SingularPascalCase}} ---------------------------------------------------------------------
func (req *Get{{.SingularPascalCase}}Req) toModel() model.{{.SingularPascalCase}} {
	return model.{{.SingularPascalCase}}{
		Identification: m.Identification{
			Slug: db.ToNullString(req.Identifier.Slug),
		},
	}
}

func (res *Get{{.SingularPascalCase}}Res) fromModel(m *model.{{.SingularPascalCase}}, msg string, err error) {
	if m != nil {
		res.{{.SingularPascalCase}} = {{.SingularPascalCase}}{
		  {{- range $key, $prop := .PropDefs}}
		  {{- if not $prop.IsEmbedded}}
		  {{- if eq $prop.ModelType ""}}
		  {{$prop.Name}}: m.{{$prop.Name}},
		  {{- else}}
		  {{$prop.Name}}: m.{{$prop.Name}}.{{$prop.ModelType}},
		  {{- end}}
      {{- end}}
		  {{- end}}
		}
	}
	res.Msg = msg
	if err != nil {
		res.Error = err.Error()
	}
}

// update{{.SingularPascalCase}} ------------------------------------------------------------------
func (a *Auth) makeUpdate{{.SingularPascalCase}}ResJSON(m *model.{{.SingularPascalCase}}, msg string, err error) ([]byte, error) {
	res := Update{{.SingularPascalCase}}Res{}
	res.fromModel(m, msg, err)
	return a.toJSON(res.{{.SingularPascalCase}})
}

// toModel creates a {{.SingularPascalCase}} model from transport values.
func (req *Update{{.SingularPascalCase}}Req) toModel() model.{{.SingularPascalCase}} {
	return model.{{.SingularPascalCase}}{
		Identification: m.Identification{
			Slug: db.ToNullString(req.Identifier.Slug),
		},
		{{- range $key, $prop := .PropDefs}}
		{{- if not $prop.IsEmbedded}}
		{{- if eq $prop.SafeTypeMaker ""}}
		{{$prop.Name}}: req.{{$prop.SingularPascalCase}},
    {{- else}}
		{{$prop.Name}}: {{$prop.SafeTypeMaker}}(req.{{$prop.SingularPascalCase}}),
    {{- end}}
    {{- end}}
		{{- end}}
	}
}

func (res *Update{{.SingularPascalCase}}Res) fromModel(m *model.{{.SingularPascalCase}}, msg string, err error) {
	if m != nil {
		res.{{.SingularPascalCase}} = {{.SingularPascalCase}}{
		  {{- range $key, $prop := .PropDefs}}
		  {{- if not $prop.IsEmbedded}}
		  {{- if eq $prop.ModelType ""}}
		  {{$prop.Name}}: m.{{$prop.Name}}, //{{$prop.ModelType}}
		  {{- else}}
		  {{$prop.Name}}: m.{{$prop.Name}}.{{$prop.ModelType}},  //{{$prop.ModelType}}
		  {{- end}}
		  {{- end}}
		  {{- end}}
		}
	}
	res.Msg = msg
	if err != nil {
		res.Error = err.Error()
	}
}

// delete{{.SingularPascalCase}} ------------------------------------------------------------------
func (res *Delete{{.SingularPascalCase}}Res) fromModel(m *model.{{.SingularPascalCase}}, msg string, err error) {
	res.Msg = msg
	if err != nil {
		res.Error = err.Error()
	}
}
