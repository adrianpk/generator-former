// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/templates/endpoint.tmpl
// assets/templates/migration.tmpl
// assets/templates/model.tmpl
// assets/templates/server.tmpl
// assets/templates/transport.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTemplatesEndpointTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x41\x6f\x1a\x3d\x10\x3d\xaf\x7f\xc5\x64\x0f\x91\x37\x42\xe6\x1e\x89\x43\x3e\x12\x7d\x6a\x1b\x25\x28\xa8\xed\xd9\xda\x1d\x36\x2e\x8e\x0d\xe3\x71\x00\x21\xfe\x7b\xe5\xdd\xa4\x29\xa1\x2c\x55\x44\xa5\xe4\x06\xe3\xe7\xb7\xcf\x6f\xde\x78\x77\xa6\xcb\xa9\xae\x11\xd6\x6b\x50\x63\xa4\x47\x53\xe2\x68\x5a\x8f\x34\xdf\xc3\x66\x23\x84\x79\x98\x79\x62\x90\x22\xcb\xd1\x95\xbe\x32\xae\xee\xff\x08\xde\xe5\xa9\x40\xe4\x29\xa4\x5f\x0e\xb9\x7f\xcf\x3c\xcb\x45\x21\x44\xe9\x5d\x48\x3b\x00\xfa\x7d\x18\xfa\x87\x07\x74\x0c\x66\x02\xda\x12\xea\x6a\x05\x15\x4e\x8c\xc3\x4a\x64\x25\xa1\x66\xbc\x22\x82\x01\xe4\x43\xed\x9c\x67\x68\x6b\x80\x8e\x0d\xaf\x72\x91\xd5\xc8\x17\xd6\x6e\x63\x6a\xe4\x2d\x40\x5a\x05\xd8\x07\x88\xb3\x6a\xe7\x29\x6d\xed\x05\x53\xa1\xc5\xd7\x98\xb6\xf6\x0b\x53\x08\x31\x89\xae\x04\xa9\xe1\xec\x22\xf2\x7d\x01\xc3\x46\xea\x7a\xad\xc6\xc6\xd5\xd1\x6a\x1a\xe9\x50\x6a\x3b\xd4\x01\x37\x9b\xcf\xe3\xdb\x1b\xb9\x80\x64\x8a\xba\xc3\x30\xf3\x2e\xe0\x77\x32\x8c\xd4\x03\x82\xb3\xa7\xfa\x3c\x62\xe0\x02\xd6\x22\x7b\xd4\x04\x84\xf3\x6e\xd2\x3b\x9c\x3f\x23\xc3\x21\x64\x10\x22\xeb\xf7\xe1\x12\x4b\x5f\xa1\xc8\x90\x08\xce\x07\x90\x5a\xa7\x6e\x70\xd1\x96\x49\x92\xfa\xcf\x57\xab\x42\xb5\xff\xe5\x29\xe1\xbc\x10\x99\x99\x40\xc2\x9f\x0c\xc0\x19\x9b\xd4\x65\x5a\x5d\xfb\x5a\x16\xea\x2a\xb5\x5c\x22\x51\xd1\x14\x17\xe9\x44\xcf\xc7\x93\x8b\x5e\x12\x96\x56\x08\x39\x92\x13\xd9\xa6\x15\xf1\x94\xab\x56\xc5\x00\xb4\xea\xd4\x2e\x09\xe7\x3d\x38\x6d\xa9\x8e\x2d\xe5\x36\xf2\x2c\xb2\xd8\xbb\x61\xb3\xd3\xe6\xff\x91\xd3\x6c\x8c\x6c\x24\x6d\x5f\x74\xc2\xdb\x7b\xbc\x9f\x71\xab\xc1\x5d\xb0\xf0\x07\x63\xcf\x93\xb3\xfb\x37\xbd\x47\x5b\x8f\x3a\x3a\xfb\x19\x77\x6d\xed\x18\x9a\x92\x97\xc9\x4a\x52\x43\xef\x18\x97\x2c\x0b\x91\x05\x1b\xeb\x1e\xf8\x69\x5a\x28\x79\xa9\xbe\x69\x1b\x51\xfe\x46\x73\xed\x17\x48\x65\xc3\x32\xe4\xe5\x17\x5c\x15\x4a\x06\x26\xe3\xea\xd6\xec\x13\x3f\x6d\x5c\xc6\xc4\xd0\xde\x9b\x69\x0c\x65\x6e\xdc\xa3\xb6\xa6\x82\xf4\x84\xbc\xd8\xed\xc3\xdb\xe6\x8c\x70\xae\xc6\x36\xd6\x30\x68\x88\x5f\xe7\xe3\x23\x8c\xdd\xd7\xe6\x8a\x3e\x72\x44\x3a\x49\xb7\x52\x72\x00\xf9\xc1\x83\xf2\xbe\xde\x0a\x29\xad\x9f\xaa\xf4\xa2\x9d\x18\xa4\xdd\xe0\xa6\xdc\x76\xf6\xe3\x9d\x45\xf7\xb2\xf9\x72\x38\x72\x74\x3b\x49\xb7\xa2\x7b\x00\xf9\xc1\xa3\xfb\xd7\xa9\x69\xae\xbb\x4e\x2f\x0e\xc4\xe6\xdf\x9e\xe3\x70\xac\x7e\x06\x00\x00\xff\xff\x85\x9a\x41\xf1\x9a\x0b\x00\x00")

func assetsTemplatesEndpointTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesEndpointTmpl,
		"assets/templates/endpoint.tmpl",
	)
}

func assetsTemplatesEndpointTmpl() (*asset, error) {
	bytes, err := assetsTemplatesEndpointTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/endpoint.tmpl", size: 2970, mode: os.FileMode(436), modTime: time.Unix(1571914888, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesMigrationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xcf\x6b\xea\x40\x10\xc7\xcf\x99\xbf\x62\x5e\xf0\x90\x3c\x34\x81\x77\x14\x3c\x3c\x6c\xe9\x55\xd0\x63\xa1\xae\x71\xdc\x2e\xee\x0f\x3b\x3b\x42\x4a\xc8\xff\x5e\x36\x15\x6a\x5b\x5a\x2d\xf4\x98\xef\x64\x3e\xfb\x65\x3e\x07\xd5\xec\x95\x26\x74\x46\xb3\x12\x13\x3c\xd4\xf5\xea\xd1\x44\x6c\x82\xa3\x88\x3b\x0e\x0e\x75\x98\x6c\x8c\xdf\x2a\x51\x60\xdc\x21\xb0\x60\x6e\x83\xce\x01\xea\x1a\xe7\x4c\x4a\xa8\xeb\x26\x58\x2d\xec\x91\x95\x5d\xa8\xd8\x28\x3b\x57\x91\x70\xd2\xf7\x2b\xb5\xb1\xe7\xf0\xdd\xd1\x37\x58\x38\xfc\xeb\x8c\x2e\xaf\x5a\x2e\x4a\x24\xe6\xc0\xd8\x41\x26\x2d\x4e\x67\xe8\xaa\x3b\x92\x55\x5b\x94\x00\x59\x94\x94\xac\x07\xc4\x2b\x6d\x29\x4a\xc8\x91\x97\x44\x58\x03\x64\x69\x96\xdf\xfb\x3c\x7d\x03\x64\x0f\xe3\xc4\xc3\x19\x4a\x5b\xdd\xb6\xd4\x14\x51\x4a\xc8\xcc\x6e\x48\xff\xcc\xd0\x1b\x9b\x9e\xca\x98\xe4\xc8\x3e\xa5\x90\xf5\x9f\x31\x5d\x87\xac\xbc\x26\x1c\xed\xe9\xf9\xdf\x18\x47\xf1\xc9\x2e\x85\x8d\xd7\xa9\x50\xf5\xdf\x0a\xf1\x5b\x95\xbe\x07\xc4\x28\x78\xaa\x7a\xf6\xf3\x6f\x96\x4c\xa5\xc8\x6f\x71\x40\x9c\x46\xde\x58\xe8\x07\x53\x37\x1c\x0e\x17\x3c\x71\xb0\x76\xa3\x9a\xfd\x07\x4d\x97\x37\xaf\x97\x94\x58\xdf\x2b\xfa\xe2\x16\xd3\x1f\x1b\x7b\x77\x81\x97\x00\x00\x00\xff\xff\x81\xdf\x2a\x26\xe8\x02\x00\x00")

func assetsTemplatesMigrationTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesMigrationTmpl,
		"assets/templates/migration.tmpl",
	)
}

func assetsTemplatesMigrationTmpl() (*asset, error) {
	bytes, err := assetsTemplatesMigrationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/migration.tmpl", size: 744, mode: os.FileMode(436), modTime: time.Unix(1571782333, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesModelTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcb\x6e\xdb\x3c\x10\x85\xd7\xe2\x53\x0c\x84\x00\xb1\x7f\xe4\x97\xf6\x01\xba\x08\xdc\x2e\x02\x34\x45\x5a\xb7\x5d\x87\x22\x47\xf2\x44\x24\x47\xe5\x05\x8e\x6b\xe8\xdd\x0b\x5d\x92\x3a\x89\xdd\x6c\xb2\xb3\x39\x33\xdf\x1c\x1d\x1e\x76\x52\xb5\xb2\x41\xb0\xac\xd1\x08\x41\xb6\x63\x1f\x61\x21\xb2\xbc\xa1\xb8\x49\x55\xa1\xd8\x96\x71\x4b\xee\xbe\x4c\x89\x74\x2e\x32\x0b\x43\xc9\xc8\xa9\x64\xa9\xf5\xbc\xc5\xdf\x68\xca\x4a\xaa\x16\x9d\x2e\x47\x54\x2e\x96\x42\xc4\x5d\x87\x03\xab\x2c\x61\xbf\x2f\xd6\xe4\x9a\x64\xa4\xbf\x95\x41\x49\xb3\x92\x01\xfb\x7e\xde\x9b\x9d\x2a\x87\xe8\x93\x8a\xb0\x17\x59\x66\x8b\x6b\x8d\x2e\x52\x4d\x4a\x46\x62\x27\xb2\x6c\xbf\xff\x1f\xbc\x74\x0d\xc2\x59\x8b\xbb\x0b\x38\xeb\x3c\x77\x70\xf9\x01\x8a\x5b\xcf\xdd\x47\xac\x43\xdf\xcf\x6d\x54\x83\xe3\x38\x75\x14\xd7\xe1\x93\xad\x50\x6b\xd4\x73\x7d\x3a\xfe\x22\xed\xb0\xf3\xf1\xef\x5a\xd6\xf8\x7d\xd7\x0d\x47\x77\xba\xba\xcc\x9f\xce\xbf\x7e\x5e\xb1\x49\xd6\xf5\x7d\x0e\xf7\x81\xdd\x41\x69\xfe\x86\x95\xb4\x38\x7f\xc2\x05\x5b\x8a\x68\xbb\xb8\xcb\xef\x66\x2d\xe8\xf4\x93\xae\xe9\x37\x00\x80\x2d\xae\x92\xa6\x28\xb2\x7e\xb0\xae\x2c\x61\x8d\x71\xe5\x51\x46\xfc\x29\x4d\xc2\x00\x35\xfb\xc9\xae\x42\xd4\xc9\x29\x58\x1c\x98\x76\xb0\x10\xfe\x3b\x61\xe6\xf2\x25\x71\xb1\x04\xf4\x9e\x3d\xec\x05\x40\x59\xc2\x37\xec\x8c\x54\x08\xe7\xc7\xc1\xa3\x3f\xc5\x3a\x7a\x72\xcd\xf9\xa8\x46\x3a\x8e\x1b\xf4\x90\x1c\xfd\x4a\x08\x34\xdf\x0f\xfa\x89\x77\x5d\xc3\x30\x02\x9a\x31\x8c\xee\xe3\x03\x85\x08\xec\x61\xc7\x09\x3a\x8f\x35\xfe\x65\xb0\xc3\x62\x1e\x8b\xb0\x25\x63\xa0\x42\x48\x01\xf5\xb8\x69\x6d\x52\x03\x0d\x3a\xf4\xe3\xdd\xcf\x9d\x57\xd0\x19\x49\x6e\x48\x09\xb9\x66\x9a\x92\x26\x30\x6c\xd9\xb7\x50\xa5\x08\x34\xb3\xac\x6c\x11\x0c\x73\x0b\x81\x2c\x19\xe9\x41\x1a\x03\xc1\xa4\x66\xf2\x15\xa5\xda\x00\xb9\x10\xa5\x53\x38\xc1\xb9\x86\xb8\xa1\x00\x1e\x03\x27\xaf\xb0\x18\x73\x4c\x05\x16\x97\x70\xdc\xa0\xdb\xfa\x61\x08\x5f\x3e\x60\xbb\xfa\x21\x7f\x16\xeb\xd7\x7d\x6f\xbb\x7c\x0a\xf0\xe2\x25\x14\x2f\xef\xf5\xe4\xda\xe5\x49\xe2\x98\xbd\x57\xa0\xa5\xc8\x3c\xc6\xe4\x1d\x38\x32\xa2\x7f\x8c\xe5\x8f\x4e\xbf\x73\x2c\x0f\x89\x07\xb1\x7c\x53\xed\xf3\xb9\x23\x6a\x6f\x64\x54\x1b\x50\xec\x34\x0d\x56\xbd\x83\xda\x91\xb8\x88\xea\x1f\x2d\x15\xb3\x19\xd4\xfb\xf9\x9a\x6f\x86\x85\xe3\xdc\x8a\xa7\xb7\x3f\xeb\xf4\xa2\x17\x7f\x02\x00\x00\xff\xff\x52\x01\xd0\xff\x82\x05\x00\x00")

func assetsTemplatesModelTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesModelTmpl,
		"assets/templates/model.tmpl",
	)
}

func assetsTemplatesModelTmpl() (*asset, error) {
	bytes, err := assetsTemplatesModelTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/model.tmpl", size: 1410, mode: os.FileMode(436), modTime: time.Unix(1571788688, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesServerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc1\x4e\xdc\x30\x10\x3d\xaf\xbf\x62\xe4\x4b\x13\x14\xb2\xf7\x4a\x1c\xd0\x56\x85\x16\xd4\x46\x0b\x5b\xce\xc6\x99\xdd\x58\x24\x76\x18\x8f\x61\xa3\x55\xfe\xbd\xb2\xc3\xc2\x52\x15\x4a\x0f\x91\xe2\xc9\xbc\xe7\xf7\x9e\x3d\xe9\x95\xbe\x53\x1b\x84\xdd\x0e\xca\x2b\xa4\x07\xa3\xb1\xba\xdb\x54\x8a\x1b\x18\x47\x21\x4c\xd7\x3b\x62\xc8\xc4\x4c\x6a\x67\x19\xb7\x2c\xc5\x4c\x5a\xe4\x79\xc3\xdc\x4b\x21\x66\x72\x63\xb8\x09\xb7\xa5\x76\xdd\x7c\xe3\x8e\x75\x63\xe6\xba\x31\x52\xe4\x42\xcc\xe7\x70\xda\xf7\x68\x6b\xe0\xc6\x78\x60\x07\x1e\xe9\x01\x09\xd6\xa6\xc5\x32\x7e\x5e\x79\x04\xe5\x41\x01\xe1\x1a\x09\xad\xc6\x02\x0c\x03\x74\x6a\x00\xc2\xfb\x60\x08\xc1\xbb\x0e\x01\x6b\xc3\x65\x62\x5c\xb8\xae\x43\xcb\x13\xa5\x59\x83\x6a\x09\x55\x3d\x40\x8d\x6b\x63\xb1\x4e\xb4\x3c\xf4\x08\x4f\x7a\x2f\x70\x00\xcf\x64\xec\x46\x08\xed\xac\x4f\x66\x92\x5b\x63\x37\xa1\x55\x74\xe9\x1e\x91\xb4\xf2\x08\xe3\xb8\xe0\x6d\xec\x3f\x80\x9e\x80\x7c\xab\x79\xef\x71\x89\x7d\xab\x34\x42\xa6\xe1\x68\xe1\x2c\x2b\x63\x91\x72\xb8\x1d\x60\x70\x81\x40\x07\xcf\xae\x8b\x1a\x82\xe6\xd8\xef\x28\x6e\xf0\x80\x14\x4d\x20\x74\xc8\x8d\xab\xc1\x58\x76\xa0\x60\x1d\x34\x1b\x67\xa3\xb3\xc1\x05\xa8\x9d\xfd\xc4\x60\x11\xeb\x18\x9f\x62\x56\xba\x81\x18\xc5\x3a\x58\xfd\xe7\x8e\x9d\xba\xc3\x53\xad\x5d\xb0\x7c\x5a\x7d\x5b\xba\xc0\x48\x59\xaf\x28\xc6\xa5\x1b\x53\x4e\x95\xfc\xe0\x1d\x76\x62\x46\xc8\x81\x2c\x4c\x7d\x53\x3d\x93\xf3\x68\xba\x6a\x03\xa9\xf6\x95\xe5\x02\xe2\xc6\x99\x6e\x5e\x11\xee\xc4\x6c\xa6\x9b\xb2\x72\x9e\x33\x39\x97\x05\xe8\x72\x41\xa8\x18\x0f\xa3\xab\x94\xd7\xaa\x5d\x4c\x44\xdf\xaf\x7e\xfe\xc8\x27\xd4\x19\x3e\x83\xce\x90\x3f\x82\x78\xd1\x28\x77\x72\x1c\xdf\x3a\x9f\xdd\x4e\x8e\xf2\x45\xb3\xff\x8b\xe8\x99\xd7\x4d\xb9\xf2\x98\xbd\x73\x21\xf2\x7d\xdf\x7f\x0a\x4d\x98\x2a\x3c\x63\x56\x7d\xfd\x91\x44\x12\xec\x0b\xb6\x98\x2c\x26\xe4\xb4\xfa\x27\x72\xcc\x45\x7c\x46\x31\x5d\x8e\x77\x2c\x65\x16\xb7\x0c\x71\x82\xcb\x73\x65\xeb\x36\xc6\x71\xb8\x3a\xb8\x16\x87\xe5\xaf\x31\xc6\x94\xe5\xe3\x54\x5f\xa2\xef\x9d\xf5\x78\x43\x86\x91\x0a\x20\x38\x7a\xaa\xdf\x07\xf4\x3c\x65\xec\xdb\xb0\x81\xcf\x27\x29\xfb\xd5\xf2\xb2\x52\xa4\xba\x8c\x8a\xb7\xe7\xea\x38\x22\x64\x3a\x6b\xde\x26\xe4\x34\x8e\xe5\x8d\xe1\xe6\x97\x6a\x03\x66\x54\x2e\xa6\x5a\x96\x17\xef\x19\xbd\xc0\xa1\x80\x48\x17\xd9\xa2\xe9\xf4\x8f\xc3\xf3\xeb\xeb\x2a\x7b\x2c\x80\x12\xe5\x9e\x4a\xf3\x36\xdf\x47\xf8\x3b\x00\x00\xff\xff\x8a\x21\x63\x49\x17\x05\x00\x00")

func assetsTemplatesServerTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesServerTmpl,
		"assets/templates/server.tmpl",
	)
}

func assetsTemplatesServerTmpl() (*asset, error) {
	bytes, err := assetsTemplatesServerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/server.tmpl", size: 1303, mode: os.FileMode(436), modTime: time.Unix(1571855180, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesTransportTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x4f\x6b\xdb\x30\x14\xc0\xcf\xd1\xa7\x78\x84\x1e\x36\xe8\x9c\x7b\x61\xa7\xb4\x8c\x1e\x36\xcc\xfe\x9c\xc6\xa0\xaa\xf5\xa2\x6a\xb1\x25\xf5\xe9\x69\x10\x8c\xbe\xfb\xc8\x6c\x6f\x8d\x56\x27\x0a\x8c\xf5\x66\x4b\x3f\xbd\x3f\x3f\x3d\x79\xd9\x6c\xa5\x46\xe8\x7b\xa8\x3e\x21\xfd\x30\x0d\xd6\x5b\x5d\x4b\x7e\x80\x94\x84\x30\x9d\x77\xc4\xf0\x4a\x2c\x62\x34\x0a\x96\xda\xf0\x43\xbc\xaf\x1a\xd7\xad\x82\x64\x47\x66\xa5\x5d\xb5\xdf\x5a\x8a\xd7\x42\xf0\xce\xe3\x9e\x5d\xad\x86\x78\xc6\xea\xd8\x4a\xaa\x65\x68\x64\xbb\x96\x01\x21\x25\x20\x7c\x8c\x18\x18\xa4\x55\x40\x18\xbc\xb3\x01\x41\x49\x96\x95\x58\xcc\x9f\x0a\x4c\xb1\x61\xe8\xc5\x62\xd1\xf7\x6f\x80\xa4\xd5\x08\x17\x5b\xdc\x5d\xc2\x85\x27\xe7\xe1\xea\x2d\x54\x35\x39\x7f\x8d\x9b\x90\xd2\x88\x99\x0d\x58\xc7\x03\x51\xdd\x86\x9b\xee\x1e\x95\x42\x35\xee\x0f\xcb\x1f\x64\x87\x29\xc1\xf4\xfb\x79\xe7\xf7\xbf\x77\xdf\x83\xb3\x57\xcb\x69\x75\x2a\x6a\x2d\x3b\xfc\x55\x53\x4a\x97\xae\x33\x8c\x9d\xe7\xdd\xf2\x6e\x4c\x87\x56\xfd\x4e\x3d\x7e\x27\x31\x74\x55\xb7\x91\x64\x7b\xd8\xd3\xd7\x6f\xcf\xf7\x9b\x52\x26\x73\x4d\x28\x19\x67\xe5\x7c\xc4\x47\x30\xd6\x47\x9e\x34\x16\xf0\x07\x3e\x67\xb8\xa1\xfa\x92\xfc\x01\x5c\xe4\x73\x0a\x08\x85\x05\x2c\xde\x07\x0d\xb0\x87\x8d\xd5\xd3\xa5\x74\x41\x67\xf2\x6f\x88\x1c\x65\x14\x12\x1d\x52\xb9\xd5\x77\xc8\x33\x37\xf3\x97\xd0\xe3\xe8\x9f\x56\x46\x5f\xc7\xf0\x5c\xd5\x71\x36\xb3\xf4\x0c\xf5\x5f\x1c\x95\x8d\xdd\x29\xf8\x49\x33\xb7\x0a\x2d\x9b\x8d\x41\xca\xa5\x15\x4e\xd8\x29\xfa\xe5\xc7\xeb\x8b\x57\x67\x3d\xda\x02\x7e\x46\x60\xc1\x0b\x3e\x19\x3c\xf7\x5b\x70\xe0\xe5\x15\x5f\x63\x8b\xe7\x28\x2e\xe0\x8f\xcf\xe8\xc9\x00\xb9\xc6\x82\x03\x4f\x32\xfe\x63\x55\x3f\x03\x00\x00\xff\xff\x4b\x44\x14\xa6\xdc\x07\x00\x00")

func assetsTemplatesTransportTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesTransportTmpl,
		"assets/templates/transport.tmpl",
	)
}

func assetsTemplatesTransportTmpl() (*asset, error) {
	bytes, err := assetsTemplatesTransportTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/transport.tmpl", size: 2012, mode: os.FileMode(436), modTime: time.Unix(1571854569, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/templates/endpoint.tmpl":  assetsTemplatesEndpointTmpl,
	"assets/templates/migration.tmpl": assetsTemplatesMigrationTmpl,
	"assets/templates/model.tmpl":     assetsTemplatesModelTmpl,
	"assets/templates/server.tmpl":    assetsTemplatesServerTmpl,
	"assets/templates/transport.tmpl": assetsTemplatesTransportTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"endpoint.tmpl":  &bintree{assetsTemplatesEndpointTmpl, map[string]*bintree{}},
			"migration.tmpl": &bintree{assetsTemplatesMigrationTmpl, map[string]*bintree{}},
			"model.tmpl":     &bintree{assetsTemplatesModelTmpl, map[string]*bintree{}},
			"server.tmpl":    &bintree{assetsTemplatesServerTmpl, map[string]*bintree{}},
			"transport.tmpl": &bintree{assetsTemplatesTransportTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
