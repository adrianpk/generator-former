// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/templates/conv.tmpl
// assets/templates/endpoint.tmpl
// assets/templates/migration.tmpl
// assets/templates/model.tmpl
// assets/templates/server.tmpl
// assets/templates/service.tmpl
// assets/templates/test.tmpl
// assets/templates/transport.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTemplatesConvTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x51\x6f\x9b\x3a\x14\x7e\x86\x5f\x71\x6e\xd4\x87\x50\x51\x78\x8f\x94\x87\xab\xb6\xba\xea\x95\xda\x45\x4d\xf7\x54\x55\x93\x03\x07\x8a\x62\x1b\x62\x9b\x4e\x1d\xf2\x7f\x9f\x6c\x48\x06\x59\x80\xae\xcd\xaa\x4d\x6a\xa5\x4a\x18\x7f\x3e\x07\x7f\xe7\x3b\x9f\x9d\x82\x44\x6b\x92\x22\x54\x55\xb0\x44\xf1\x94\x45\xb8\x58\xa7\x0b\xa2\x1e\xb5\x76\xdd\x8c\x15\xb9\x50\x30\x75\x9d\x49\x9a\x29\x4a\x56\x41\x94\xb3\x90\x65\x6b\x91\x7f\xc5\x6f\x48\xc3\x15\x89\xd6\xc8\xe3\x30\x5e\x4d\x46\x31\xa9\x20\x3c\x8b\x48\x98\x71\x85\x82\x13\x1a\xb2\x3c\x46\x3a\x71\x1d\x06\x23\x2b\x1b\xa0\xe7\xba\x49\xc9\x23\x98\x0a\xdc\xc0\xe9\xb9\x40\xa2\xd0\x7c\x76\xc6\xd3\x92\x12\xb1\x20\x32\x22\xf4\x9c\x48\xd4\xfa\x16\x37\x1e\xa8\xfc\xda\x2c\x9c\x7a\x60\x03\x04\x3d\x58\xa8\x5c\x47\xa0\x2a\x05\x1f\xc6\x55\xae\xe3\x54\xd5\x19\x08\xc2\x53\x84\x93\x35\x3e\xfb\x70\x52\x88\xbc\x80\xd9\x1c\x82\x85\xc8\x8b\x0b\x4c\xa4\xd6\x0d\x2c\x4b\x80\xe7\xaa\x46\x04\x57\xf2\x92\xad\x30\x8e\x31\x6e\xcf\xe3\xa6\x99\x5e\x92\x04\xef\x9e\x0b\xbc\x26\x6b\x14\x30\x99\x34\xa0\x7a\xf2\x86\x30\xd4\x7a\x06\x02\x37\xc1\xf6\xdd\xa1\xef\xf3\x5d\x00\x00\x13\x1a\xa9\x19\x1f\x08\xb1\x5b\xde\xce\xa7\xf5\x74\x2c\xb4\xd7\x8a\xcd\xcd\x16\xba\xa3\x7a\x43\xcd\xb3\x76\xf5\x8f\x3a\xc9\xd1\x3a\x49\x0f\x12\x91\xb3\xba\x52\x0c\x4e\x07\x4b\xe0\x03\x93\x29\x48\x25\x32\x9e\xfa\x80\x42\x98\xff\x5c\x78\xa6\x84\x59\x02\x0c\xfe\x99\x03\xcf\xa8\x19\x3a\x02\x65\x6f\xc5\xe7\xf0\xfe\x35\xb6\x3b\x34\xa4\xf7\xd5\x97\x05\xdd\x37\xfe\x96\xd7\xbe\x6a\xee\x2f\xd8\x0d\x77\xa9\x5a\x41\x7e\x2e\x54\xe7\xd9\x16\xce\x72\x76\x2d\x53\x98\x1b\x9e\x2d\xa5\x86\xe3\x3d\x52\x2f\x0d\xe5\x30\x37\x53\xf5\xf3\xd4\x6b\xaa\x1e\x86\x90\xa2\xaa\xaa\x60\x41\x4b\x41\x68\x87\xf2\xb3\xb7\xff\xb5\x55\xf5\x5f\x4f\x9e\x7d\x41\x49\xb8\x7f\x78\xb5\xa4\x04\xca\xc3\x9b\x99\xcd\xe1\xfe\xa1\x4f\x42\xda\x75\x92\x5c\xc0\x17\x1f\x98\x01\xd6\x52\x62\x72\xcb\x9f\x79\x37\xa0\xbe\xba\xaf\x5e\xa0\xbf\x1a\x38\xa4\xc0\x1d\xa2\x5f\x83\x00\x2f\x51\xe1\x9e\xab\x8c\x2f\xea\x53\xe2\xbe\x85\x74\x4d\xa4\x3b\xd2\x35\x5d\x87\x0b\x30\x07\x52\x14\xc8\xe3\x69\x1f\xc2\x07\x81\xd2\xdb\x89\xba\x2f\x4a\xdf\xf2\xe3\xb5\xc2\x41\xff\x39\x42\x33\xb4\xda\x61\xb3\x6d\x87\xf7\x3c\x09\xaf\x62\xe4\x2a\x4b\xb2\x88\xa8\x2c\xe7\x46\x02\xdd\x37\x06\xe3\x2c\x69\x99\xce\x20\x5e\x05\x77\xf9\x4d\x49\xe9\xd2\x76\x99\x3d\x6d\xb6\x60\x14\x81\x01\x79\x46\x1d\x46\x22\xfb\xa7\xc7\xd0\xc6\xfe\xbc\xa3\xe3\xa3\x79\x8f\x7c\x9c\x94\x45\xdc\x7f\x79\x38\x42\x1b\x35\x52\x23\x70\xfa\x6f\xa9\x1e\x3d\x60\x64\x8d\x9f\x87\x72\xde\xa2\xfc\x7f\xf9\xe9\xe6\xf5\x72\x9b\xde\x3f\xac\x9e\x15\xfa\xdd\x63\xc6\x28\x64\x2c\x6f\xd5\x30\xda\xd2\xbc\xcd\x62\x43\x79\xbb\xce\x25\x81\xca\xed\x27\x0e\xa8\xd8\x6b\xe8\x6d\x7c\x01\x22\x7b\x47\x93\x40\xfa\xc4\x5d\xfb\x81\x6d\x37\x50\x82\x70\x69\x7f\x17\x3c\x11\x5a\xa2\x0c\xda\x46\x34\xb2\x89\xbf\xca\x8b\x3e\x6e\xfb\xbf\x7e\xdb\x1f\x13\xf1\x87\x65\x8f\x59\x36\x84\xe1\x01\x03\x3e\x9a\x91\xc3\x58\xfc\x83\x7e\xfe\x7b\xdc\x3d\x46\x8a\xef\xe0\xee\x56\x98\x17\x43\xb9\x8e\x28\xcc\xb7\xb1\xf2\x3d\x00\x00\xff\xff\xaa\xc9\x4f\x9d\x8e\x11\x00\x00")

func assetsTemplatesConvTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesConvTmpl,
		"assets/templates/conv.tmpl",
	)
}

func assetsTemplatesConvTmpl() (*asset, error) {
	bytes, err := assetsTemplatesConvTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/conv.tmpl", size: 4494, mode: os.FileMode(436), modTime: time.Unix(1571960982, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesEndpointTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\xc1\x6e\x1a\x31\x10\x86\xcf\xeb\xa7\x98\x70\x88\xbc\x11\x32\xf7\x48\x1c\x5a\x52\x55\x55\xa3\x16\x25\x6a\x7b\xb6\x76\x87\xc5\x65\x6b\xef\x8e\xc7\x40\x84\xf6\xdd\x2b\xb3\x89\x5a\x4a\x31\x55\x44\x25\xb8\xc1\x78\xfc\x33\xf3\xcf\x37\xa6\xd1\xc5\x42\x57\x08\x9b\x0d\xa8\x47\xa4\xa5\x29\x70\xba\xa8\xa6\x9a\xe7\xd0\x75\x42\x98\x1f\x8d\x23\x06\x29\xb2\x01\xda\xc2\x95\xc6\x56\xa3\xef\xde\xd9\x41\x0c\x10\x39\xf2\xf1\x93\x45\x1e\xcd\x99\x9b\x81\xc8\x85\x98\x05\x5b\x80\xd4\x70\xf3\x26\xf0\x3c\x87\x09\xa1\x66\xdc\x6c\xd4\xa3\xb1\x55\xa8\x35\x4d\xb5\x2f\x74\x3d\xd1\x1e\xbb\x4e\xae\x20\xde\x53\x0f\xe8\x1b\x67\x3d\x7e\x23\xc3\x48\x43\x20\xb8\x79\x8e\xb7\x01\x3d\xe7\xb0\x11\xd9\x52\x13\x10\xb6\x69\xc1\x07\x6c\x5f\x32\xfd\xb1\x4c\x2f\x44\x36\x1a\xc1\x1d\x16\xae\x44\x91\x21\x11\xdc\x8e\x21\x76\xa7\x3e\xe1\xaa\x0f\x93\x24\xf5\xd6\x95\x4f\xb9\xea\xbf\xcb\x6b\xc2\x36\x17\x99\x99\x41\xcc\xbf\x1a\x83\x35\x75\xac\x2e\xd3\xea\xde\x55\x32\x57\xef\xa2\x2b\x12\x89\xf2\x6d\x70\x15\x3b\x7a\x69\x4f\xae\x86\xb1\xb0\x78\x42\xc8\x81\xac\xc8\xba\xbe\x88\x67\xeb\xfb\x2a\xc6\xa0\x55\xda\x36\xc2\x76\x08\xd7\xbd\xd4\xa9\x4b\xf9\x1c\xb8\x09\x2c\x0e\x5e\xe8\xf6\x46\xfc\x1e\x39\xe2\x33\xad\x03\xe9\xfa\x57\x9d\xf0\xba\xf9\x1e\x56\xdb\x19\x6e\x2a\xcd\xff\xc5\xd4\xdb\xe8\x6a\xa2\xd2\x33\xb4\xf4\x64\x2b\x73\x58\x6d\xdf\xd2\xc4\xb2\x14\xbc\x8e\x36\x92\x9a\x38\xcb\xb8\x66\x99\x8b\xcc\xd7\xa1\x1a\x82\x5b\xc4\x83\x82\xd7\xea\xab\xae\x03\xca\xdf\x64\xee\xdd\x0a\xa9\xd8\xaa\x4c\x78\xfd\x11\x9f\x72\x25\x3d\x93\xb1\x55\x6f\xf4\x95\x5b\x6c\x1d\xc6\xa8\xd0\x3f\x29\x71\xfd\xe4\xc0\xd8\xa5\xae\x4d\x09\xf1\x17\x06\xf9\xfe\x0c\x5e\xb7\x5f\x84\xad\x7a\xac\x43\x05\xe3\xad\xf0\x9f\x6c\x5c\xc2\xba\x7d\x69\xca\xd3\xbe\xa8\x49\xc1\x1d\x42\x8e\x64\x5e\x38\x24\xe7\xf5\x4f\x10\x49\xfd\x50\xa2\x65\x33\x33\x48\xfb\xd0\x46\x66\xd3\x28\x9c\x17\xb6\x77\x58\xe3\x49\xb1\x4d\x0a\xee\x60\x7b\x24\xf3\xc2\xb1\xfd\x67\x62\xb6\xcf\x5c\x7a\x0c\x69\x64\xfe\x6f\x1f\xc7\x91\xfa\x19\x00\x00\xff\xff\xb3\xa5\x6f\x0f\xad\x0a\x00\x00")

func assetsTemplatesEndpointTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesEndpointTmpl,
		"assets/templates/endpoint.tmpl",
	)
}

func assetsTemplatesEndpointTmpl() (*asset, error) {
	bytes, err := assetsTemplatesEndpointTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/endpoint.tmpl", size: 2733, mode: os.FileMode(436), modTime: time.Unix(1572271400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesMigrationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xcf\x6b\xea\x40\x10\xc7\xcf\x99\xbf\x62\x5e\xf0\x90\x3c\x34\x81\x77\x14\x3c\x3c\x6c\xe9\x55\xd0\x63\xa1\xae\x71\xdc\x2e\xee\x0f\x3b\x3b\x42\x4a\xc8\xff\x5e\x36\x15\x6a\x5b\x5a\x2d\xf4\x98\xef\x64\x3e\xfb\x65\x3e\x07\xd5\xec\x95\x26\x74\x46\xb3\x12\x13\x3c\xd4\xf5\xea\xd1\x44\x6c\x82\xa3\x88\x3b\x0e\x0e\x75\x98\x6c\x8c\xdf\x2a\x51\x60\xdc\x21\xb0\x60\x6e\x83\xce\x01\xea\x1a\xe7\x4c\x4a\xa8\xeb\x26\x58\x2d\xec\x91\x95\x5d\xa8\xd8\x28\x3b\x57\x91\x70\xd2\xf7\x2b\xb5\xb1\xe7\xf0\xdd\xd1\x37\x58\x38\xfc\xeb\x8c\x2e\xaf\x5a\x2e\x4a\x24\xe6\xc0\xd8\x41\x26\x2d\x4e\x67\xe8\xaa\x3b\x92\x55\x5b\x94\x00\x59\x94\x94\xac\x07\xc4\x2b\x6d\x29\x4a\xc8\x91\x97\x44\x58\x03\x64\x69\x96\xdf\xfb\x3c\x7d\x03\x64\x0f\xe3\xc4\xc3\x19\x4a\x5b\xdd\xb6\xd4\x14\x51\x4a\xc8\xcc\x6e\x48\xff\xcc\xd0\x1b\x9b\x9e\xca\x98\xe4\xc8\x3e\xa5\x90\xf5\x9f\x31\x5d\x87\xac\xbc\x26\x1c\xed\xe9\xf9\xdf\x18\x47\xf1\xc9\x2e\x85\x8d\xd7\xa9\x50\xf5\xdf\x0a\xf1\x5b\x95\xbe\x07\xc4\x28\x78\xaa\x7a\xf6\xf3\x6f\x96\x4c\xa5\xc8\x6f\x71\x40\x9c\x46\xde\x58\xe8\x07\x53\x37\x1c\x0e\x17\x3c\x71\xb0\x76\xa3\x9a\xfd\x07\x4d\x97\x37\xaf\x97\x94\x58\xdf\x2b\xfa\xe2\x16\xd3\x1f\x1b\x7b\x77\x81\x97\x00\x00\x00\xff\xff\x81\xdf\x2a\x26\xe8\x02\x00\x00")

func assetsTemplatesMigrationTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesMigrationTmpl,
		"assets/templates/migration.tmpl",
	)
}

func assetsTemplatesMigrationTmpl() (*asset, error) {
	bytes, err := assetsTemplatesMigrationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/migration.tmpl", size: 744, mode: os.FileMode(436), modTime: time.Unix(1571782333, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesModelTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xcb\x6e\xdb\x30\x10\x3c\x8b\x5f\xb1\x10\x02\xc4\x2e\x52\xea\x1e\xa0\x87\xc0\xed\x21\x40\x53\xa4\x75\xdb\x73\x68\x72\x25\xb3\x22\xb9\xea\x92\x44\xe2\x1a\xfa\xf7\x42\x8f\xa4\xce\xc3\xcd\x25\x37\x89\xbb\x3b\x33\x9c\x1d\x76\x4a\xb7\xaa\x41\xf0\x64\xd0\x09\x61\x7d\x47\x9c\x60\x21\x00\xca\xc6\xa6\x6d\xde\x48\x4d\xbe\x8a\x2a\x11\xdb\xaa\x21\x99\xb3\x35\xa5\x28\xfc\x58\x76\x6a\x2a\x7b\xdb\x32\xdd\xe2\x1f\x74\xd5\x46\xe9\x16\x83\xa9\x46\xbc\x52\x2c\x85\x48\xbb\x0e\x61\x21\x8a\xaa\x82\xfd\x5e\xae\x6d\x68\xb2\x53\x7c\xad\xa2\x56\x6e\xa5\x22\xf6\xfd\x4c\x5e\x1c\x2b\xc7\xc4\x59\x27\xd8\x8b\xa2\xf0\xf2\xd2\x60\x48\xb6\xb6\x5a\x25\x4b\x41\x14\xc5\x7e\xff\x1e\x58\x85\x06\xe1\xa4\xc5\xdd\x19\x9c\x74\x4c\x1d\x9c\x7f\x00\x79\xcd\xd4\x7d\xc4\x3a\xf6\xfd\xdc\x66\x6b\x08\x94\xa6\x0e\x79\x19\x3f\xf9\x0d\x1a\x83\x66\xae\x4f\xc7\x5f\x94\x1f\x38\xef\x7f\xd7\xaa\xc6\xef\xbb\x6e\x38\xba\x31\x9b\xf3\xf2\xe1\xfc\xeb\xe7\x15\xb9\xec\x43\xdf\x97\xf0\x2b\x52\x38\x28\xcd\x77\x58\x29\x8f\xf3\x15\xce\xc8\xdb\x84\xbe\x4b\xbb\xf2\x66\xd6\x82\xc1\x3c\xe8\x9a\xbe\x01\x00\xbc\xbc\xc8\xc6\x26\x51\xf4\x83\x75\x55\x05\x6b\x4c\x2b\x46\x95\xf0\xa7\x72\x19\x23\xd4\xc4\x93\x5d\x52\xd4\x39\x68\x58\x1c\x98\x76\x40\x08\xef\x8e\x98\xb9\x7c\x8a\xb8\x58\x02\x32\x13\xc3\x5e\x00\x54\x15\x7c\xc3\xce\x29\x8d\x70\xfa\x32\xf0\xe8\x8f\x5c\x27\xb6\xa1\x39\x1d\xd5\xa8\x40\x69\x8b\x0c\x39\xd8\xdf\x19\xc1\xce\xfb\x41\x9e\xf0\x2e\x6b\x18\x46\xc0\x10\xc6\xd1\x7d\xbc\xb3\x31\x01\x31\xec\x28\x43\xc7\x58\xe3\x3f\x0c\x0a\x28\xe7\xb1\x04\xb7\xd6\x39\xd8\x20\xe4\x88\x66\x64\x5a\xbb\xdc\x40\x83\x01\x79\xdc\xfd\xdc\x79\x01\x9d\x53\x36\x0c\x29\xb1\xa1\x99\xa6\x94\x8b\x04\xb7\xc4\x2d\x6c\x72\x02\x3b\x63\x79\xd5\x22\x38\xa2\x16\xa2\xf5\xd6\x29\x06\xe5\x1c\x44\x97\x9b\xc9\x57\x54\x7a\x0b\x36\xc4\xa4\x82\xc6\x09\x9c\x6a\x48\x5b\x1b\x81\x31\x52\x66\x8d\x72\xcc\xb1\x95\x28\xcf\xe1\x65\x83\xae\xeb\xbb\x21\x7c\xe5\x00\xdb\xd5\x77\xe5\xa3\x58\x3f\xef\x7b\xdd\xe5\x63\x00\x4f\x5e\x82\x7c\xba\xd7\xa3\xb4\xcb\xa3\x88\x63\xf6\x9e\x01\x2d\x45\xc1\x98\x32\x07\x08\xd6\x89\xfe\x3e\x96\x3f\x3a\xf3\xc6\xb1\x3c\x44\x3c\x88\xe5\xab\x6a\x1f\xcf\xbd\xa0\xf6\x4a\x25\xbd\x05\x4d\xc1\xd8\xc1\xaa\x37\x50\x3b\x22\x2e\x92\xfe\x4f\xcb\x86\xc8\x0d\xea\x79\x5e\xf3\xd5\x40\x38\xce\xad\x68\x7a\xfb\xb3\x4e\x16\xbd\xf8\x1b\x00\x00\xff\xff\xff\xac\x9f\x2b\x87\x05\x00\x00")

func assetsTemplatesModelTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesModelTmpl,
		"assets/templates/model.tmpl",
	)
}

func assetsTemplatesModelTmpl() (*asset, error) {
	bytes, err := assetsTemplatesModelTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/model.tmpl", size: 1415, mode: os.FileMode(436), modTime: time.Unix(1571952138, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesServerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc1\x4e\xdc\x30\x10\x3d\xaf\xbf\x62\xe4\x4b\x13\x14\xb2\xf7\x4a\x1c\xd0\x56\x85\x16\xd4\x46\x0b\x5b\xce\xc6\x99\xdd\x58\x24\x76\x18\x8f\x61\xa3\x55\xfe\xbd\xb2\xc3\xc2\x52\x15\x4a\x0f\x91\xe2\xc9\xbc\xe7\xf7\x9e\x3d\xe9\x95\xbe\x53\x1b\x84\xdd\x0e\xca\x2b\xa4\x07\xa3\xb1\xba\xdb\x54\x8a\x1b\x18\x47\x21\x4c\xd7\x3b\x62\xc8\xc4\x4c\x6a\x67\x19\xb7\x2c\xc5\x4c\x5a\xe4\x79\xc3\xdc\x4b\x21\x66\x72\x63\xb8\x09\xb7\xa5\x76\xdd\x7c\xe3\x8e\x75\x63\xe6\xba\x31\x52\xe4\x42\xcc\xe7\x70\xda\xf7\x68\x6b\xe0\xc6\x78\x60\x07\x1e\xe9\x01\x09\xd6\xa6\xc5\x32\x7e\x5e\x79\x04\xe5\x41\x01\xe1\x1a\x09\xad\xc6\x02\x0c\x03\x74\x6a\x00\xc2\xfb\x60\x08\xc1\xbb\x0e\x01\x6b\xc3\x65\x62\x5c\xb8\xae\x43\xcb\x13\xa5\x59\x83\x6a\x09\x55\x3d\x40\x8d\x6b\x63\xb1\x4e\xb4\x3c\xf4\x08\x4f\x7a\x2f\x70\x00\xcf\x64\xec\x46\x08\xed\xac\x4f\x66\x92\x5b\x63\x37\xa1\x55\x74\xe9\x1e\x91\xb4\xf2\x08\xe3\xb8\xe0\x6d\xec\x3f\x80\x9e\x80\x7c\xab\x79\xef\x71\x89\x7d\xab\x34\x42\xa6\xe1\x68\xe1\x2c\x2b\x63\x91\x72\xb8\x1d\x60\x70\x81\x40\x07\xcf\xae\x8b\x1a\x82\xe6\xd8\xef\x28\x6e\xf0\x80\x14\x4d\x20\x74\xc8\x8d\xab\xc1\x58\x76\xa0\x60\x1d\x34\x1b\x67\xa3\xb3\xc1\x05\xa8\x9d\xfd\xc4\x60\x11\xeb\x18\x9f\x62\x56\xba\x81\x18\xc5\x3a\x58\xfd\xe7\x8e\x9d\xba\xc3\x53\xad\x5d\xb0\x7c\x5a\x7d\x5b\xba\xc0\x48\x59\xaf\x28\xc6\xa5\x1b\x53\x4e\x95\xfc\xe0\x1d\x76\x62\x46\xc8\x81\x2c\x4c\x7d\x53\x3d\x93\xf3\x68\xba\x6a\x03\xa9\xf6\x95\xe5\x02\xe2\xc6\x99\x6e\x5e\x11\xee\xc4\x6c\xa6\x9b\xb2\x72\x9e\x33\x39\x97\x05\xe8\x72\x41\xa8\x18\x0f\xa3\xab\x94\xd7\xaa\x5d\x4c\x44\xdf\xaf\x7e\xfe\xc8\x27\xd4\x19\x3e\x83\xce\x90\x3f\x82\x78\xd1\x28\x77\x72\x1c\xdf\x3a\x9f\xdd\x4e\x8e\xf2\x45\xb3\xff\x8b\xe8\x99\xd7\x4d\xb9\xf2\x98\xbd\x73\x21\xf2\x7d\xdf\x7f\x0a\x4d\x98\x2a\x3c\x63\x56\x7d\xfd\x91\x44\x12\xec\x0b\xb6\x98\x2c\x26\xe4\xb4\xfa\x27\x72\xcc\x45\x7c\x46\x31\x5d\x8e\x77\x2c\x65\x16\xb7\x0c\x71\x82\xcb\x73\x65\xeb\x36\xc6\x71\xb8\x3a\xb8\x16\x87\xe5\xaf\x31\xc6\x94\xe5\xe3\x54\x5f\xa2\xef\x9d\xf5\x78\x43\x86\x91\x0a\x20\x38\x7a\xaa\xdf\x07\xf4\x3c\x65\xec\xdb\xb0\x81\xcf\x27\x29\xfb\xd5\xf2\xb2\x52\xa4\xba\x8c\x8a\xb7\xe7\xea\x38\x22\x64\x3a\x6b\xde\x26\xe4\x34\x8e\xe5\x8d\xe1\xe6\x97\x6a\x03\x66\x54\x2e\xa6\x5a\x96\x17\xef\x19\xbd\xc0\xa1\x80\x48\x17\xd9\xa2\xe9\xf4\x8f\xc3\xf3\xeb\xeb\x2a\x7b\x2c\x80\x12\xe5\x9e\x4a\xf3\x36\xdf\x47\xf8\x3b\x00\x00\xff\xff\x8a\x21\x63\x49\x17\x05\x00\x00")

func assetsTemplatesServerTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesServerTmpl,
		"assets/templates/server.tmpl",
	)
}

func assetsTemplatesServerTmpl() (*asset, error) {
	bytes, err := assetsTemplatesServerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/server.tmpl", size: 1303, mode: os.FileMode(436), modTime: time.Unix(1571855180, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\xc1\x8e\xda\x30\x10\x86\xcf\xf6\x53\x4c\x39\xac\x92\x15\x0a\xf7\x4a\x1c\xb6\x4b\x85\x90\x5a\x15\x2d\xea\x03\x58\x61\xc8\x5a\x6b\xec\x30\xb1\x5b\x55\x28\xef\x5e\xc5\xde\x2e\x2c\xc8\x09\x84\x42\x7b\x42\xc4\xbf\xff\x19\xdb\xdf\x8c\x5d\x8a\xfc\x45\x14\x08\xdb\x6d\xb6\x40\xfa\x21\x73\x9c\xbf\x14\x73\x61\x9f\xeb\x9a\xf3\xdc\xe8\xca\x42\xc2\x59\x4e\x28\x2c\x36\x1a\xa9\x0b\xa7\x04\xcd\x45\x95\x0b\xf5\x28\x2a\xac\xeb\xcf\x44\x30\x86\x41\x2e\xb4\x36\x16\x82\x14\xf6\xb4\x5f\xcc\x4f\xa4\xdc\x4b\x07\x9c\x15\x68\x1f\x94\xda\x6e\xb3\xb9\x72\x24\x54\xdc\xa8\x40\x1b\x71\x01\x25\x2b\x1b\xac\x4e\x4a\x29\xee\x34\xe0\xcc\x95\xcb\x53\x97\x16\xa4\x71\xab\x25\x2a\x3c\xd1\x2a\x48\xa3\x56\x29\xe7\x2b\xa7\x73\x48\x04\xdc\x3f\x38\xfb\x9c\xc2\x63\xdb\x09\x24\x84\x9b\x76\xc5\x13\x6e\x86\x40\x58\xc1\x7d\x87\xac\x4a\x01\x89\x0c\xc1\x96\xb3\xd1\x08\xbe\x9a\x25\x2a\xce\x1c\x7c\x1c\x03\xe1\x26\xb3\xc6\x7f\x49\x52\xee\x87\x9f\xb0\x34\x9c\x11\x96\x66\xd8\x4c\x6b\x54\x22\xdb\xf3\x7e\x14\x6b\x7c\xb3\x2e\x4d\x92\x72\x26\x57\x5e\xf9\x61\x0c\x5a\xaa\x26\x0a\x23\xac\xb2\x15\x99\x75\x70\xd6\x52\x0d\xa1\x8b\x37\x1f\x2d\xf5\x73\xad\x23\xdd\xfc\xe3\xac\xe6\x9c\xa1\xdf\xe5\x26\xa1\x2c\x2c\x34\xb9\x73\x37\x0d\x6a\xd6\x6b\x69\xaf\xbf\xce\xd1\x08\xbe\x39\x5b\x3a\xcb\x0f\x6c\xef\xdc\x10\x06\x83\x61\x13\x34\xe5\x7f\xa6\x69\xa9\x78\x7d\x84\xd4\xd4\x97\xcf\x71\x19\x7a\x9a\x62\x83\x3b\x90\xe2\x8a\x03\x86\xae\x05\x49\x7b\x27\x89\x6e\x9d\xab\xde\xd2\xf0\x47\x36\xf5\x36\xd7\x8e\xda\x9f\x91\x9e\x01\xa3\x84\x34\xeb\x3f\x8b\x90\x68\xc7\x89\x0f\x1f\x52\xf2\x3f\xf7\x9a\xd6\x5b\x24\x4e\x51\x48\x62\xc7\xd0\xa7\x5f\x0b\xe5\x8a\xc4\x65\xcd\x4f\xb6\xb0\x24\x75\x71\xdd\x14\x2e\x42\xea\x1f\xf5\x9c\xef\x6d\xb7\xad\x87\xaa\x55\xb1\xe3\xaa\x43\x76\xa3\x16\xd4\xf5\x78\x68\xdb\xcb\xe9\xfb\x57\xc9\x5e\x0a\x9c\xe5\x8e\x08\xb5\x3d\x6a\x54\xaf\x90\x35\xd5\x31\x5b\xa2\xb6\x72\x25\x91\x3c\x71\xb7\xc8\x38\xdc\xa8\x20\x60\x1d\xad\x54\xe6\xb2\xd9\x04\xc6\xf0\xba\x80\x6c\x36\x09\x53\xc3\x71\xbd\x63\x36\x7c\x3a\xe3\x7e\xee\x9d\x7a\xff\x42\xb9\x64\xb7\x2e\xae\x95\x49\xdb\x73\xd2\xd7\x4a\xab\x62\x57\x2b\x1d\xb2\x1b\xd5\x4a\xd7\xeb\xf8\x94\xe3\x0b\x2b\xb9\xbc\x0a\xfe\x46\x2e\x67\xa2\xd4\x3b\x64\x14\x25\x6f\x1b\x61\xe9\x77\x00\x00\x00\xff\xff\x4d\x13\xda\x4d\xd7\x0d\x00\x00")

func assetsTemplatesServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesServiceTmpl,
		"assets/templates/service.tmpl",
	)
}

func assetsTemplatesServiceTmpl() (*asset, error) {
	bytes, err := assetsTemplatesServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/service.tmpl", size: 3543, mode: os.FileMode(436), modTime: time.Unix(1571996887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesTestTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x73\xdb\x36\x12\x7f\x26\x3f\x05\xca\x19\xa7\x94\x8f\xa5\x1a\xf7\xee\xc5\x37\x7a\x68\x6d\xdf\xb5\x33\x49\xec\x91\x9d\xf4\x21\x97\x49\x21\x72\x45\xf1\x4c\x02\x34\x00\x4a\x4e\x5d\x7f\xf7\x9b\x05\x20\xfe\xb1\x48\x8a\x4e\x9c\x4e\x2f\x93\x3c\xc4\x24\xb8\xff\xb1\xf8\x61\x17\x42\x41\xa3\x6b\x9a\x00\xa1\xa5\x5a\xb9\x6e\x9a\x17\x5c\x28\xe2\xbb\x8e\x17\x71\xa6\xe0\x56\x79\xae\xe3\x81\x10\x5c\x48\x7c\x5a\xe6\x7a\x80\xeb\x17\x05\x52\xa5\x2c\xf1\x5c\xd7\xf1\x92\x54\xad\xca\x45\x18\xf1\x7c\x1a\xd3\x35\x44\xc9\x6a\x9a\xf0\xef\x64\x01\x9b\x29\xfe\xe7\xb5\x49\xfe\x9b\xf3\x54\x70\x36\x95\x37\xd9\xad\xfd\x94\x51\xf3\x29\x4f\xaf\x05\xdf\xc0\xef\x90\x4d\x17\x34\xba\x06\x16\x4f\x23\xce\x96\x69\xb2\x9f\x2e\x5e\xec\xa7\x49\x04\x65\x69\x44\xa7\x29\x53\x20\x18\xcd\xa6\x79\x9a\x08\xaa\x52\xce\x3e\x86\x97\xc7\x90\x7d\x04\x9f\x80\x82\x8f\x67\x2b\xae\x93\x29\xce\xce\x7e\x8e\x8c\x63\x94\xf2\x34\x21\x7b\x08\x9b\x4e\xe7\x3c\xde\x4b\x6e\xfd\x94\xeb\x68\x1f\xa9\x04\xb1\x4e\x23\xf0\xdc\x89\xeb\xae\xa9\x20\xbe\x4b\xc8\x74\x4a\x4e\x04\x50\x05\xee\xdd\x5d\x78\xb9\x8e\xae\x40\x2a\x33\xf0\x92\x16\xf7\xf7\xae\x21\x79\x5d\xc4\x48\x42\x48\xa9\x1f\x90\x34\x65\x49\x99\x51\x71\x41\x65\x44\xb3\x13\x2a\xe1\xfe\xfe\x0d\xcd\xd2\x98\xcc\x48\x4e\x8b\xb7\x52\x89\x94\x25\xef\x74\x58\x97\x34\x82\xbb\xfb\x3b\x97\x90\x5a\x87\x91\x68\x74\x10\xb2\xd5\x73\x49\xf3\x22\x03\xf2\xdc\x25\x44\xea\xc7\x1e\x4d\xcf\x47\x6a\x31\xf2\x9e\xf7\xa8\x39\xda\xa7\xe6\x31\x0e\x19\x99\x47\xb5\xaa\x89\xeb\x2e\x4b\x16\x11\xfc\xf8\x92\xa6\xcc\xcf\xc9\xa1\x5d\x95\xe1\xcb\x09\xb9\x73\x9d\x3c\x11\xe4\x78\x46\x24\xa8\xb2\xf0\x27\xae\x13\xf1\x18\x70\x20\x0f\xe7\x25\xc3\x01\x05\x54\xc4\x7c\xc3\xfc\x3c\x11\x13\xd7\xe1\x32\x3c\xbb\x4d\x95\x8f\x74\x13\xf7\xde\x75\xa7\x53\x52\xcf\x57\x8f\x0f\x04\x75\x4a\xd2\xf8\xfa\x82\x6f\x40\x44\xe6\x63\x84\xac\x29\x67\x61\x6d\xeb\xa0\x34\x5f\xd5\x4e\x5c\x69\x27\x30\x9c\xe8\xc0\x4e\xfe\x5c\x2a\x51\x46\x0a\x53\xc8\xc1\x64\x13\x20\xc9\xa0\xe8\x39\x48\xd7\x75\x22\x75\x8b\x21\xb0\x00\x17\xfe\x44\xa3\xeb\x44\xf0\x92\xc5\x3a\x40\xcb\x04\x3f\xa2\x01\x27\x1a\x77\x70\x30\xe3\xd5\xe0\x0b\x9e\x24\x20\xfc\x89\xab\xcd\x9a\x43\xc1\x5d\xa7\x94\x20\xf0\x29\x20\x20\xc4\x96\x10\x07\xfc\x48\xdd\x06\x24\x5a\x26\x01\xc9\x78\x12\x10\x0f\x57\xfe\x77\x2b\xca\xe2\x0c\x84\x37\x71\x9d\x74\xa9\x59\xbe\x99\x11\x96\x66\xe8\xaa\xa3\xc2\x33\x44\x5b\x1f\x84\xb0\x4f\x93\x89\xeb\xdc\x6b\x6d\x3f\x22\x46\x3b\x74\xab\x01\x5f\x77\x34\x20\x52\x54\x1a\x02\xb2\x35\xcd\xda\x8b\xa1\x73\x1d\x54\x39\x23\x34\x1c\x9e\x06\x01\x37\x01\x79\x26\x40\x0e\xd9\xb9\xf4\x3d\x3d\xbf\xd0\x37\xfb\x7a\xef\x38\x26\x07\xd2\xd3\xd1\x69\xf9\xa4\x4d\x7a\x03\x22\x5d\x7e\x70\x9d\x1e\xfe\xe3\x19\x4e\x6b\xd8\x63\x64\x1f\x9b\x11\x5a\xcd\x47\x02\xaa\x47\xc0\x4f\x1f\x2e\xb3\x32\xf1\xbb\xa5\x84\xf8\x4d\x47\x77\x5f\x08\x28\x63\x5c\xa1\x9a\xbe\x30\x2c\x05\xcf\x49\x4c\x15\x5d\x50\x09\xbd\xe1\x48\x97\x3d\xfc\xc6\x1f\x32\x7b\x02\xe5\x5e\xad\xeb\x9b\x54\x5e\xd2\xbc\x37\x01\xba\xa5\x05\xe4\x70\xc8\xc6\x89\xb5\xee\x05\x4f\x96\xbe\x77\xf0\xb7\xf5\x7f\x98\x17\x10\xac\x01\xc2\xcb\xb8\xcc\x8b\x1e\xa9\x18\x81\xc7\x73\x59\x95\x98\xdc\xd5\xc2\xf1\xfa\x40\x0a\x03\x40\x28\x8b\x49\xaa\x24\x59\x23\x67\x1a\x69\x60\x22\x31\x07\x49\x30\x86\x39\x55\xd1\x2a\x34\x11\xaa\xb1\xef\xdf\x3a\x7b\x2e\xb2\x52\xd0\xac\x03\xf6\x30\xf0\x34\xcb\x48\x45\xd3\xcc\xa0\x1a\xf3\xfa\xa4\x74\xc2\xdd\x85\x00\x01\x37\x65\x2a\x53\x05\xd2\x75\xde\x57\x99\x6c\x16\xdb\xe5\x76\x47\xe9\x10\xb7\x27\x55\xf5\x7a\xb4\x98\xcc\x12\xbb\x37\x75\xda\x3e\xb4\x68\x0d\x1c\x3b\x02\x6e\xd0\xa8\x3e\xd7\xe6\x70\x73\xd7\xc4\xe6\x7e\xba\xaf\xb0\xdc\x80\xe5\xde\x4c\x19\x8b\xc8\x16\x0a\x76\x66\x74\x3c\x18\xaf\xbb\x13\xbe\x06\xe3\xdd\x8f\xda\xa4\x1e\xbe\x5d\xdc\xf2\x3d\xc6\x51\x56\xc1\x59\x0b\x92\x50\xbc\x26\x40\xcf\x3c\xef\x81\x63\x73\xcb\xd0\x72\xa4\x62\xb1\x52\x6e\xd4\x07\x34\x34\x03\xe6\x77\x9b\x63\xa2\x87\x64\xdf\xcc\xc8\xd1\xc3\xf5\x71\x5b\x40\xa4\x97\x86\xda\xf0\xee\x28\x26\x5c\x91\x83\xd8\x0b\x50\x44\x6d\x79\xb7\xae\xb7\xdf\xbf\xd3\xbb\x08\xaa\xea\xc6\x30\x5b\x3f\xbe\xf5\x64\x56\x26\xde\x3b\xf2\xc7\x1f\x7d\xa2\x9e\x8f\x13\x75\x54\x89\x6a\xc5\x9b\x2f\x14\x4d\x19\xc4\x64\x4d\xb3\x12\x24\x89\x79\x0d\x79\xc4\x78\x0d\x31\xe1\x0c\x64\x37\xfe\x0d\x14\x7e\xbd\xf9\xb6\xf8\x40\xd0\x94\x1d\x14\x1c\x5d\xf6\x3d\xc0\xc1\x2e\x25\xff\x0f\xd0\xd8\x5d\x8b\xde\xa0\xfa\x5f\x62\x60\x2a\x5d\xa6\x20\xf0\xcd\xc1\x09\x3e\xee\xd4\xb9\xcd\xa4\xf0\x52\x77\x09\x81\xeb\x38\xf7\x81\xd1\xda\xc6\xd7\xcf\x5f\xf8\x8a\x2a\xe6\x08\x9c\xe1\x2b\xd8\xfc\x6c\x90\xed\xe3\x81\xb5\xae\x63\x52\x96\xaa\x94\x66\xe9\xef\xa0\xa5\x13\xcb\xdd\x13\x72\x47\x84\x27\x9c\x31\x88\xd4\x97\x84\xfd\x9f\x54\x8f\x0f\x14\x82\xa3\xf1\xff\x69\x90\xb8\xdb\x8a\x39\xc8\xbd\x55\x7d\x6f\x21\x3c\x07\x19\xbe\xa2\x39\x8c\xc0\x53\x46\x73\x78\x3a\x10\x7c\x3d\x74\x2a\xd1\x17\x6f\x9d\xc0\xe6\x3c\xa3\x81\x81\x83\xa2\xfe\x14\x18\xfc\x13\x71\xb0\xbf\xad\xeb\x01\x39\xd7\x7d\x78\x82\xd3\xd1\xe5\x0f\x86\xf0\x6b\x39\xd9\x82\x94\xe1\x74\x1b\x8b\x2a\x26\x8b\x3f\x53\x97\x3f\x06\x12\x3e\x67\xa3\x8f\xa8\xf2\x25\xf7\xfa\x98\x13\xe7\xa7\xe7\xc7\xe4\xc7\x38\x26\x34\x8a\x4a\x81\x73\x19\xad\x20\xba\x26\x7c\xa9\xbb\x57\x33\xbf\x31\x59\xa6\x90\xc5\x32\xdc\x6b\x5f\x78\x96\xd3\x34\xb3\xc5\x48\x3f\x1a\x9b\xe4\xd3\x87\x9c\x6f\x3d\x40\x96\xa7\x83\xe4\x53\xc8\x60\xdf\x99\x64\xac\x69\xba\xab\x53\x1d\x2a\x5d\xc1\xd4\xd8\x3c\x28\xf3\x0b\x2b\x51\x1f\x0f\xcd\xdb\xaa\x76\x30\x4a\x7b\x0a\xdb\xbe\x73\xb6\x81\xba\x76\x8f\xba\xaf\x68\xdf\x40\xfb\xe1\x04\x1e\x8b\xf6\xf5\xb2\xf9\x24\xb4\x5f\xf7\xd8\xf1\x24\x07\xb3\xdb\x84\xe9\xc5\x6c\x01\xaa\x14\xac\xd5\xa0\x77\x22\xc5\xec\xd1\x2c\x4d\xfd\xc8\xbe\xdf\xca\x36\xe6\xf5\xc4\x75\x43\xcd\x31\xa4\x89\x7e\xdc\x85\xe5\xf7\xf6\x17\x9f\xbd\x81\xc3\xbe\x9b\xc8\x3a\x42\xe4\xd0\xfc\x8c\x1a\x9a\x15\x30\x21\xfe\xa1\xfe\x59\xaf\x6f\xc3\x0d\xcc\x2c\x6b\x94\x8b\x38\x63\xcd\x29\xc3\x8e\xab\x1b\xa9\x4c\xfc\xf0\x55\xd3\x9b\x40\xca\x68\x05\xb9\xce\xf0\x68\x99\x84\x6f\x68\x76\x2e\x4e\x61\xe9\x7b\x45\x12\x9a\x4f\x5e\x40\xbc\xa2\x5c\x64\x69\xe4\x61\x4e\x4b\x85\xb4\xbf\x5d\x9e\xbd\x38\x3b\xb9\x22\x87\xe4\x5f\xf3\xf3\x97\xe4\xa0\x71\xec\xd4\x8c\xd9\xaf\x3f\x9f\xcd\xcf\xf4\x29\xc3\xec\xdb\x03\xf9\xed\x3f\x7f\xd3\xfc\x33\xb2\xcc\x55\x78\x59\x88\x94\xa9\xa5\x2f\x55\x40\x8c\xa6\x40\x53\xa2\x92\x12\x75\x3c\x1b\x0c\xc1\xdd\xfd\x76\x59\x61\x00\xb0\x35\xf3\xcb\x80\x48\xd5\xe9\x79\x2e\x35\x9c\x34\xd5\xee\xdf\xad\x3b\xd7\xd0\xc3\x20\x72\x21\xb1\xc5\xf6\x73\x99\xd8\x15\x66\x09\xca\x00\x69\xaa\x94\xf8\x98\xc3\x7c\xd2\x3b\xfb\x8a\x9f\xf0\xbc\xa0\x02\xc8\x60\x8c\x26\x64\xc1\xb9\x8e\x80\x35\xaa\x67\x29\x5c\x01\xa3\x4c\xfd\x72\x8a\xab\xa5\x12\x5d\x8d\x6e\x17\xc9\xb3\x67\xae\xd3\xb3\x2d\x99\xa3\xaf\x16\x77\x73\x79\x0d\x71\xea\x7e\xb1\xc5\x89\x23\x63\x38\xcf\x37\x0c\xc4\x43\xa3\xed\xe0\x18\xfe\x0b\x2a\x60\xd7\xeb\xed\xe8\x18\x09\x3d\x61\xbf\xfa\x50\x3c\x70\x69\x80\x70\x8c\x1e\x5d\xcd\xb5\x25\xb6\x0a\xbc\xc1\x99\x59\xf1\x0d\xdb\x0d\x72\x35\x6c\x65\x54\x89\x3a\xa2\x0a\x22\x7e\xe7\x62\x7f\xfb\x6e\x04\x68\x35\x81\xeb\x2f\x78\xe0\x55\xaf\x93\xee\x3a\x71\xf7\x54\x6b\xe7\xae\x41\xa3\x21\xb6\xf8\x34\xfc\x43\x6e\xd0\xb3\x2a\x9f\x7f\xb4\x81\xdd\x75\x2e\x16\x20\x45\x01\x2c\xee\x9c\xbd\x01\x2b\x76\x5c\x3c\x7a\x2a\x17\x8f\xfe\x12\x2e\x1e\x4d\x5c\x77\x58\x69\x13\xc8\xf7\xb8\x4a\x0e\x75\x12\x9a\xe2\xb4\x07\xd6\x87\x97\xc9\xc4\x2c\x11\x0c\x45\x5f\x3f\xdc\x28\x7c\x45\x9f\x18\xa4\x7a\x05\x9b\xab\xdb\xc1\x5a\xa0\x19\xce\x4e\xf4\x00\x7b\x99\xe3\x8d\xee\xff\x50\x96\x99\xf1\x7e\xd3\xec\xc5\x85\xbe\x9f\x92\xc7\x18\xb3\x5f\x05\xcf\xf3\x54\x8d\xf3\xac\xde\xb0\xab\x39\xb4\x17\x6e\xc8\x61\x9e\x26\xe1\x4b\x7d\xdd\xca\x04\x3c\xd7\xb7\x6f\xb6\xf7\xaf\xb0\xa8\xd8\x7e\xf5\x9b\x48\x34\x71\x9d\x3c\x9c\x83\x04\x6d\xc2\x74\x9a\x5b\x21\x80\xaf\x56\x5f\x5e\x69\xab\x2f\xf1\xb4\x15\x9a\x2b\x40\xe1\x9c\x67\xd9\x82\x46\xd7\x3f\x66\x99\x3f\x69\x30\xd5\xea\x1e\x54\x87\x1a\x3b\x0d\x3c\x3e\x6b\x7d\xc0\x92\xc8\xf6\xe9\xc7\xad\x3b\x4b\xe6\x0f\x06\x07\xcb\xba\x15\x97\xca\x3b\x26\xed\x7f\x5e\xc6\x23\x9a\xe9\x4f\x81\xa5\x2b\xb8\xe8\xa0\xfb\xc7\xdf\x7f\x38\xaa\x48\x6c\x85\xd8\x26\xda\x56\x8b\x5b\xa2\xaa\x46\x6e\x92\x79\xd5\xe8\x96\x0c\x1b\xa7\x5d\x75\x7a\xb4\xb2\x88\x4a\xb9\xe1\x22\x6e\x4b\xaa\x46\xb7\x64\x18\x4d\xbe\x5c\x86\x39\xbd\x05\xa6\x44\x0a\xd2\x3b\x26\xde\x0f\x9e\x6d\x5c\xb1\xce\xbd\x04\x85\x9b\x9f\x2c\x68\x04\xbe\x97\x08\xac\x6d\xb7\x1f\x6c\xaa\x9b\x48\xd6\x13\x1a\x2d\x93\xd6\xec\x6c\x77\x20\x72\x98\xf1\x24\x34\x6f\x8d\x52\x0b\x07\x5f\xc1\xe6\x14\xd6\x96\xf0\xfb\x80\x78\xf6\xd6\x20\x96\xd4\x6c\x4a\xbd\xf6\x74\x6f\xfb\xd7\x6a\x47\x3c\x31\x7f\xbb\x3a\x04\xbd\xa3\x35\x35\x07\x84\xe1\x1e\x6f\x66\x1a\xfb\x87\x06\x0c\xd5\x5b\xae\x58\x8d\xdd\x2b\x51\xda\xd8\x26\xc2\x11\xab\xc6\x8e\x38\x96\xc7\x8c\xa1\x45\xcd\xa5\xd9\x6c\xb3\x3f\x3d\x10\x01\x11\xab\x06\x22\x4f\xc8\x21\xca\x46\x9b\x74\xc7\xf3\x0a\x36\xbf\x72\x71\xdd\xeb\xfd\x6a\x67\x21\xad\xa3\xd0\x06\x4c\xfb\xb5\xd2\xc5\xaa\x3f\x39\x46\x3f\xb4\x5b\x14\x33\xc8\x92\x48\x7f\xd5\xc8\x1f\x6a\x0f\xc7\x6c\x8b\x46\xcc\xb0\x24\x54\x37\x30\x10\xe9\xcb\x2e\xa5\x84\x98\x28\x8e\x74\x6b\x73\xd2\xa8\x7f\xa5\x48\x99\x04\xa1\xf4\xfd\x18\x7b\xd4\xcb\x0b\x30\x20\x25\xc3\xaa\xe7\x34\x9d\x1f\xf1\x0f\xe5\x4d\x76\x1b\x9e\xfe\xd4\xea\x12\xbb\xea\xa9\x56\xeb\xa8\x99\xce\x0b\x60\xbe\x57\x70\xa9\x12\x01\xd8\xfd\xc4\x8b\xd7\xf3\x17\x3e\x36\xf1\xe3\x5b\xca\x46\x5b\x76\x91\xb2\xe4\x11\xcd\xe8\x76\xa9\x69\xbb\x6c\x5a\x4c\xa7\xc6\x88\x46\xc0\x2e\xac\x7d\xcd\xc8\x99\x19\xb2\xc1\xa8\xac\xde\x69\xac\x65\xd5\xf0\x23\xd6\x75\xb6\xbd\x06\x04\x9b\x88\x38\x71\x1d\x7d\xf3\xba\x8b\x5a\xa3\x64\x60\x71\x71\xf2\xd8\x7e\xda\x89\x17\x9d\xa4\x35\x3a\x56\xa0\xf1\x1e\xe7\x0e\x59\x10\x12\x3b\x99\x0c\x56\xd6\x28\x83\x66\x53\x29\xbb\xcd\xae\x40\xb3\x45\x6f\x27\xa0\xd5\x28\x63\x08\x66\x07\x92\xa0\xa7\xf8\x17\xd5\xe8\x77\x2b\x02\x9f\xe3\x05\x2e\x19\x7c\x92\x32\xc3\xf2\x66\x16\xa7\x92\x2e\x32\x20\x12\xa8\x88\x56\xef\x0b\xaa\x56\x33\xdd\x4f\xa3\xb8\x40\x0b\x33\x87\x65\x81\x16\x84\x99\xb6\x3d\x07\x40\x58\xfc\x5f\x00\x00\x00\xff\xff\x07\x05\x96\xd3\xfa\x2e\x00\x00")

func assetsTemplatesTestTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesTestTmpl,
		"assets/templates/test.tmpl",
	)
}

func assetsTemplatesTestTmpl() (*asset, error) {
	bytes, err := assetsTemplatesTestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/test.tmpl", size: 12026, mode: os.FileMode(436), modTime: time.Unix(1572204728, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesTransportTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x4f\x6b\xdb\x30\x14\xc0\xcf\xd1\xa7\x78\x84\x1e\x36\xe8\x9c\x7b\x61\xa7\xb4\x8c\x1e\x36\xcc\xfe\x9c\xc6\xa0\xaa\xf5\xa2\x6a\xb1\x25\xf5\xe9\x69\x10\x8c\xbe\xfb\xc8\x6c\x6f\x8d\x56\x27\x0a\x8c\xf5\x66\x4b\x3f\xbd\x3f\x3f\x3d\x79\xd9\x6c\xa5\x46\xe8\x7b\xa8\x3e\x21\xfd\x30\x0d\xd6\x5b\x5d\x4b\x7e\x80\x94\x84\x30\x9d\x77\xc4\xf0\x4a\x2c\x62\x34\x0a\x96\xda\xf0\x43\xbc\xaf\x1a\xd7\xad\x82\x64\x47\x66\xa5\x5d\xb5\xdf\x5a\x8a\xd7\x42\xf0\xce\xe3\x9e\x5d\xad\x86\x78\xc6\xea\xd8\x4a\xaa\x65\x68\x64\xbb\x96\x01\x21\x25\x20\x7c\x8c\x18\x18\xa4\x55\x40\x18\xbc\xb3\x01\x41\x49\x96\x95\x58\xcc\x9f\x0a\x4c\xb1\x61\xe8\xc5\x62\xd1\xf7\x6f\x80\xa4\xd5\x08\x17\x5b\xdc\x5d\xc2\x85\x27\xe7\xe1\xea\x2d\x54\x35\x39\x7f\x8d\x9b\x90\xd2\x88\x99\x0d\x58\xc7\x03\x51\xdd\x86\x9b\xee\x1e\x95\x42\x35\xee\x0f\xcb\x1f\x64\x87\x29\xc1\xf4\xfb\x79\xe7\xf7\xbf\x77\xdf\x83\xb3\x57\xcb\x69\x75\x2a\x6a\x2d\x3b\xfc\x55\x53\x4a\x97\xae\x33\x8c\x9d\xe7\xdd\xf2\x6e\x4c\x87\x56\xfd\x4e\x3d\x7e\x27\x31\x74\x55\xb7\x91\x64\x7b\xd8\xd3\xd7\x6f\xcf\xf7\x9b\x52\x26\x73\x4d\x28\x19\x67\xe5\x7c\xc4\x47\x30\xd6\x47\x9e\x34\x16\xf0\x07\x3e\x67\xb8\xa1\xfa\x92\xfc\x01\x5c\xe4\x73\x0a\x08\x85\x05\x2c\xde\x07\x0d\xb0\x87\x8d\xd5\xd3\xa5\x74\x41\x67\xf2\x6f\x88\x1c\x65\x14\x12\x1d\x52\xb9\xd5\x77\xc8\x33\x37\xf3\x97\xd0\xe3\xe8\x9f\x56\x46\x5f\xc7\xf0\x5c\xd5\x71\x36\xb3\xf4\x0c\xf5\x5f\x1c\x95\x8d\xdd\x29\xf8\x49\x33\xb7\x0a\x2d\x9b\x8d\x41\xca\xa5\x15\x4e\xd8\x29\xfa\xe5\xc7\xeb\x8b\x57\x67\x3d\xda\x02\x7e\x46\x60\xc1\x0b\x3e\x19\x3c\xf7\x5b\x70\xe0\xe5\x15\x5f\x63\x8b\xe7\x28\x2e\xe0\x8f\xcf\xe8\xc9\x00\xb9\xc6\x82\x03\x4f\x32\xfe\x63\x55\x3f\x03\x00\x00\xff\xff\x4b\x44\x14\xa6\xdc\x07\x00\x00")

func assetsTemplatesTransportTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesTransportTmpl,
		"assets/templates/transport.tmpl",
	)
}

func assetsTemplatesTransportTmpl() (*asset, error) {
	bytes, err := assetsTemplatesTransportTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/transport.tmpl", size: 2012, mode: os.FileMode(436), modTime: time.Unix(1571960619, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/templates/conv.tmpl":      assetsTemplatesConvTmpl,
	"assets/templates/endpoint.tmpl":  assetsTemplatesEndpointTmpl,
	"assets/templates/migration.tmpl": assetsTemplatesMigrationTmpl,
	"assets/templates/model.tmpl":     assetsTemplatesModelTmpl,
	"assets/templates/server.tmpl":    assetsTemplatesServerTmpl,
	"assets/templates/service.tmpl":   assetsTemplatesServiceTmpl,
	"assets/templates/test.tmpl":      assetsTemplatesTestTmpl,
	"assets/templates/transport.tmpl": assetsTemplatesTransportTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"conv.tmpl":      &bintree{assetsTemplatesConvTmpl, map[string]*bintree{}},
			"endpoint.tmpl":  &bintree{assetsTemplatesEndpointTmpl, map[string]*bintree{}},
			"migration.tmpl": &bintree{assetsTemplatesMigrationTmpl, map[string]*bintree{}},
			"model.tmpl":     &bintree{assetsTemplatesModelTmpl, map[string]*bintree{}},
			"server.tmpl":    &bintree{assetsTemplatesServerTmpl, map[string]*bintree{}},
			"service.tmpl":   &bintree{assetsTemplatesServiceTmpl, map[string]*bintree{}},
			"test.tmpl":      &bintree{assetsTemplatesTestTmpl, map[string]*bintree{}},
			"transport.tmpl": &bintree{assetsTemplatesTransportTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
